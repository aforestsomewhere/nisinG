#########################
#' Humann4
#' alpha diversity (FuncDiv)
#' 20/03/23
#' nisinG
#########################

library(tidyverse)
library(dplyr)
library(FuncDiv)
library(viridis)
library(webshot)
library(devEMF)
library(ComplexHeatmap)
library(ggplot2)


#use with humann stratified data
contrib_tab <- read.table("data\\pathcoverage_cpm_stratified.tsv",
                          header = TRUE, sep = "\t", stringsAsFactors = FALSE, check.names = FALSE)
colnames(contrib_tab) <- gsub("_Coverage", "", colnames(contrib_tab)) #remove _coverage after sample names for filtering
#read sample metadata
#T_24 only
meta <- read.csv("cleaned_data/metadata.csv", nrows=36, row.names=1)
meta <- meta %>% filter(timepoint=="T_24") %>%
  mutate(strep_exposure = case_when(
    treatment == "FS" ~ "Y", 
    treatment == "S" ~ "Y",
    treatment == "F" ~ "N",
    treatment == "B" ~ "N"))
samplenames <- rownames(meta)
contrib_tab_paths <- contrib_tab %>%
  dplyr::select(Pathway)
rownames(contrib_tab_paths)<- contrib_tab_paths[,1]
rownames(contrib_tab)<-contrib_tab[,1]

#rownames(Pathway)#preserve pathway and tax data
contrib_tab[,colnames(contrib_tab) %in% samplenames] -> contrib_tab
dplyr::left_join(contrib_tab_paths,
                 contrib_tab %>% mutate(Pathway = rownames(contrib_tab)),
                 by ='Pathway') -> final_contrib_tab

#split out UNINTEGRATED for now
final_contrib_tab2 <- final_contrib_tab %>%
  filter(!str_detect(Pathway, "UNINTEGRATED"))
rownames(final_contrib_tab2)<-final_contrib_tab2[,1]
testy7 <- final_contrib_tab2[,-1]
testy7$rowsums <- rowSums(testy7) #many sum to 0... remove
testy8 <- testy7[rowSums(testy7) >= 10,] #Get rid of genes with low read counts
testy8 <- testy8 %>% dplyr::select(-rowsums)

#separate pathway column into func and tax
testy8$Pathway <- rownames(testy8)
testy8 %>% separate(Pathway, c("func","tax"), "\\|", extra = "merge") -> final3
#funcdiv

# metrics <- c("shannon_index", "berger_parker_dominance")
# alpha_out <- alpha_div_contrib(metrics = metrics,
#                                contrib_tab = testy_df,
#                                ncores = 1,
#                                replace_NA = FALSE,
#                                samp_colname = "sample",
#                                func_colname = "func",
#                                taxon_colname = "tax",
#                                abun_colname = "abundance")
# alpha_out$shannon_index -> alpha_shannon

#pivot longer
#convert to long format, columns: sample, func, tax, copynum(1 for now), abundance
samples <- rownames(meta)
pivot_longer(final3, cols = which(colnames(final3) %in% samples), names_to = "sample", values_to = "abundance") -> testy
testy$copy_num <- 1
testy_df <- as.data.frame(testy)
#final3t <- t(final3)
#final3t <- as.data.frame(t(final_contrib_tab2))
#pivot_longer(final3t, cols = colnames(final3t), names_to = "Pathways", values_to = "Abundance") ->testy
#final3t %>%
#  pivot_longer(
#    cols = starts_with("wk"),
#    names_to = "week",
#    names_prefix = "wk",
#    values_to = "rank",
#    values_drop_na = TRUE
#  )

#abun_long <- final3 %>%
#  gather(key="timepoint", value="abundance", T_0, T_6, T_24) %>%
#  convert_as_factor(replicate, timepoint, treatment)

metrics <- c("richness", "shannon_index", "berger_parker_dominance", "ENS_pie",
             "heips_evenness", "pielous_evenness", "gini_simpson_index",
             "simpsons_evenness", "inverse_simpson_index") #remove faiths_pd as it requires a tree

alpha_out <- alpha_div_contrib(metrics = metrics,
                               contrib_tab = testy_df,
                               #in_tree = in_tree,
                               #ncores = 1,
                               replace_NA = FALSE,
                               samp_colname = "sample",
                               func_colname = "func",
                               taxon_colname = "tax",
                               abun_colname = "abundance")
# Create a new Excel workbook
wb <- createWorkbook()

# Loop through the list of lists and write each list to a separate sheet
for (i in seq_along(alpha_out)) {
  df <- as.data.frame(t(alpha_out[[i]]))  # Convert inner list to dataframe
  sheetName <- metrics[i]  # Create a sheet name
  addWorksheet(wb, sheetName)  # Add a new sheet to the workbook
  # Add row names as the first column (if you want row names as the first column)
  df <- data.frame(RowNames = samples, df)
  writeData(wb, sheet = sheetName, df)  # Write data to the sheet
}

# Save the workbook to an xlsx file
saveWorkbook(wb, "reports/FuncDiv_alpha.xlsx")

#ordinate one as an example?
#map pathways
metacyc <- read.csv("data/MetaCyc_pathway_map.csv")
#write.table(MetaCyc_pathway_map, "data/MetaCyc_pathway_map.tsv")
#metacyc <- read.table("data/MetaCyc_pathway_map.tsv")
# nom <- names(metacyc)
# nom
names(metacyc) <- c("id","Superclass1", "Superclass2", "pathway")
#metacyc$id <- rownames(metacyc)
#names(metacyc) <- c("metacyc","cat")
rich<- as.matrix(alpha_out$richness)
pathways <- as.data.frame(rownames(rich))
names(pathways) <- c("path")
pathways <- pathways %>%
  separate(path, c("metacyc","detail"), ":")

#rename
pathways[,3]<-metacyc[,2][match(pathways[,1], metacyc[,1])]
pathways[,4]<-metacyc[,3][match(pathways[,1], metacyc[,1])]
pathways[,5]<-metacyc[,4][match(pathways[,1], metacyc[,1])]
#write.csv(pathways,"pathways.csv")
unique(pathways$V3)
#variability in each pathway - sd?
richie <- as.data.frame(rich) %>% 
  rowwise() %>%
  mutate(Mean=mean(c_across(where(is.numeric))),
         SD=sd(c_across(where(is.numeric))),
         CV=SD/Mean*100)
richie <- as.data.frame(richie)
rownames(richie) <- rownames(rich)
rich_dist = vegdist(rich, method="robust.aitchison")
cmd_res = cmdscale(rich_dist, 
                   k = (nrow(rich) - 1),
                   eig = TRUE)

# calculate the proportion of variance in the data which is explained by 
#the first two PCoA axes
PC1 <- round(100*(cmd_res$eig[1]/(sum(cmd_res$eig))), digits = 2)
PC2 <- round(100*(cmd_res$eig[2]/(sum(cmd_res$eig))), digits = 2)
#extract details of features
pcoa_df = tibble(PC1 = cmd_res$points[,1], 
                 PC2 = cmd_res$points[,2])

#combine pcoa with sample data
pcoa_meta = bind_cols(pcoa_df, pathways$V3)
names(pcoa_meta) <- c("PC1", "PC2", "Pathway")
palette_groups <- c("#332211","#ffcc44", "#44aacc", "#bb2211")
palette_time <- c("#9A8822", "#F8AFA8", "#74A089")
palette_collapsed <- c("#FF0000", "#00A08A")
#Plot 1 timepoint
ggplot(pcoa_meta,aes(x = PC1, y = PC2, color=Pathway)) + 
  geom_mark_ellipse(aes(fill=Pathway),alpha=0.05,linetype = 2) + 
  geom_point() #+ theme(legend.position = "none")
       

#what about subsetting humann to strep stratified, then visulaising that?
strep_df <- testy_df %>% filter(grepl("Streptococcus_salivarius", tax))
strep_tab <- strep_df %>% pivot_wider(id_cols = func, names_from = sample, values_from = abundance )

strep_df %>%
  dplyr::group_by(func, sample) %>%
  dplyr::summarise(n = dplyr::n(), .groups = "drop") %>%
  dplyr::filter(n > 1L)       


#Omit any rows with an NA
even_mat <- as.matrix(na.omit(alpha_out$pielous_evenness))
#even_mat <- as.matrix(alpha_out$pielous_evenness)
#remove any rows where all are NA
#even_mat2 <- even_mat[rowSums(is.na(even_mat)) < 2, ]
#replace na with 0.5
#even_mat[is.na(even_mat)] <- 0.5
#even_mat2 <- replace(even_mat, is.na(even_mat), 0.5)

#RENAME Pathways using conversion via metacyc ID above
even_mat_names <- as.data.frame(rownames(even_mat))
names(even_mat_names) <- c("path")
even_mat_names <- even_mat_names %>%
  separate(path, c("metacyc","detail"), ":")
#map pathways
metacyc <- read.csv("data/MetaCyc_pathway_map.csv")
names(metacyc) <- c("id","Superclass1", "Superclass2", "pathway")
#rename
even_mat_names[,3]<-metacyc[,2][match(even_mat_names[,1], metacyc[,1])]
even_mat_names[,4]<-metacyc[,3][match(even_mat_names[,1], metacyc[,1])]
even_mat_names[,5]<-metacyc[,4][match(even_mat_names[,1], metacyc[,1])]
#write.csv(pathways,"pathways.csv")
unique(pathways$V3)

my_meta <- meta %>% dplyr::select(treatment)
htax <- ComplexHeatmap::HeatmapAnnotation(df=my_meta,
                                          which="col",
                                          simple_anno_size = unit(1, "cm"),
                                          annotation_name_gp= gpar(fontsize = 20),
                                          show_annotation_name = FALSE,
                                          col=list(#strep_exposure=c("Y"="#00A08A", "N"="#FF0000"),
                                            treatment = c("B"= "#332211","F"="#ffcc44", "FS"="#44aacc", "S"="#bb2211")),
                                          annotation_legend_param = list(
                                            treatment = list(
                                              title = "Treatment groups",
                                              at = c("B","F","FS", "S"), #CUSTOMISING DISPLAYED TREATMENT GROUP NAMES
                                              labels = c("Control", #b
                                                         expression(paste(italic("F. nucleatum"), " DSM15643")), #f
                                                         expression(paste(italic("F. nuc"), " DSM15643 + ", italic("S. sal"), " DPC6487")), #fs
                                                         expression(paste(italic("S. salivarius"), " DPC6487")))))) #s
                                              #title_gp = gpar(fontsize = 20, fontface = "bold"), 
                                              #labels_gp = gpar(fontsize = 16), 
                                              #show_annotation_name = FALSE)
                                              #grid_width=unit(1.5,"cm"))))

ht1 <- Heatmap(even_mat,
        name = "Pielou's evenness",
        col=viridis(3, option="B"),
        row_names_gp = grid::gpar(fontsize = 9),
        show_column_names = F,
        cluster_rows = T,
        show_row_dend = F,
        top_annotation = htax,
        width = unit(15, "cm"), height = unit(30, "cm"),
        heatmap_legend_param = list(color_bar = "continuous",
                                    #grid_height=unit(1,"cm"),
                                    #legend_height = unit(5,"cm"),
                                    legend_width = unit(7, "cm"), 
                                    legend_direction = "horizontal",
                                    title_position="topcenter",
                                    labels_gp = gpar(fontsize=10),
                                    legend_label_gp = gpar(fontsize = 10)))

ht1= draw(ht1,heatmap_legend_side="bottom", 
          #legend_title_gp = gpar(fontsize = 20, fontface = "bold"),
          annotation_legend_side = "top") # modify text size for ComplexHeatmap::Heatmap legend(rel abun)
        # labels_gp = gpar(fontsize = 20)),)
#pdf("figures/T24_Func_Heatmap.pdf", width=21, height=29)
#png(file="figures/func_heatmap.png", dpi=300)
#png(file="figures/ComplexHeatmap::Heatmap.png", width =1240, height=300)
png("figures/T24_Func_Heatmap.png",width=50,height=43,units="cm",res=600)
draw(ht1)
dev.off()
#remove any rows with na



#check means between samples (diff sequencing depth?)
#scale data to account for this
alpha_out_scaled <- lapply(alpha_out,
                           function(X) { data.frame(scale(x = X,
                                                          center = TRUE,
                                                          scale = TRUE)) })
#replace NAs in Shannon with 0
library(ComplexHeatmap)

#column i.e. sample annotations
anno <- as.data.frame(t(as.data.frame(rownames(meta))))
anno <- cbind(rownames(meta),meta$treatment,meta$timepoint)
annot<- t(anno)
colnames(annot)<-annot[1,]
annot
#ann <- data.frame(meta$treatment, meta$timepoint)
#rownames(ann)<-rownames(meta)
#colnames(ann) <- c('treatment', 'time')

colours <- list('treatment' = c('B' = '#9A8822', 'F' = '#F8AFA8', 'FS'='#FDDDA0', 'S'='#74A089'),
                'timepoint' = c('T_0' = '#899DA4', 'T_6' = '#C93312', 'T_24' = '#DC863B'))
#colAnn <- HeatmapAnnotation(df = na.omit(alpha_out$berger_parker_dominance),
#                            which = 'col',
#                            col = colours,
#                            annotation_width = unit(c(1, 4), 'cm'),
#                            gap = unit(1, 'mm'))
#test10 <- as.matrix(na.omit(alpha_out$shannon_index))
#colnames(test10)
#ncol(test10)
#nrow(colAnn)
richness <- Heatmap(as.matrix(na.omit(alpha_out_scaled$richness)),
                    column_title = "richness",
                    col = viridis(3),
                    column_title_gp = gpar(fontsize = 10),
                    name="richness",            
                    row_names_gp = grid::gpar(fontsize = 6),
                    heatmap_legend_param = list(title_gp = gpar(fontsize = 5, fontface = "bold"),
                                                labels_gp = gpar(fontsize = 5),  
                                                grid_height=unit(1, "mm"),
                                                grid_width=unit(1,"mm"),
                                                legend_direction = "horizontal"),
                    show_column_names = FALSE,
                    bottom_annotation = ComplexHeatmap::HeatmapAnnotation(treatment=meta[colnames(as.matrix(na.omit(alpha_out_scaled$richness))),]$treatment,
                                                                          timepoint=meta[colnames(as.matrix(na.omit(alpha_out_scaled$richness))),]$timepoint,
                                                                          col=colours))
draw(richness)
shannon <- Heatmap(as.matrix(na.omit(alpha_out_scaled$shannon_index)), #omit NAs for shannon
                   column_title = "shannon",
                   col = viridis(3),
                   column_title_gp = gpar(fontsize = 10),
                   name = "Shannon_index",
                   row_names_gp = grid::gpar(fontsize = 5),
                   show_column_names = FALSE,
                   heatmap_legend_param = list(title_gp = gpar(fontsize = 5, fontface = "bold"),
                                               labels_gp = gpar(fontsize = 5),  
                                               grid_height=unit(1, "mm"),
                                               grid_width=unit(1,"mm"),
                                               legend_direction = "horizontal"),
                   #column_names_gp= grid::gpar(fontsize = 3),
                   bottom_annotation = ComplexHeatmap::HeatmapAnnotation(treatment=meta[colnames(as.matrix(na.omit(alpha_out_scaled$shannon_index))),]$treatment,
                                                                         timepoint=meta[colnames(as.matrix(na.omit(alpha_out_scaled$shannon_index))),]$timepoint,
                                                                         col=colours))
#draw(shannon)
berger <- Heatmap(as.matrix(na.omit(alpha_out_scaled$berger_parker_dominance)),
                  column_title = "berger_parker_dominance",
                  col = viridis(3),
                  column_title_gp = gpar(fontsize = 10),
                  name = "dominance_index",
                  row_names_gp = grid::gpar(fontsize = 10),
                  heatmap_legend_param = list(title_gp = gpar(fontsize = 8, fontface = "bold"),
                                              labels_gp = gpar(fontsize = 8),  
                                              grid_height=unit(1, "mm"),
                                              grid_width=unit(1,"mm"),
                                              legend_direction = "horizontal"),
                  show_column_names = FALSE,
                  bottom_annotation = ComplexHeatmap::HeatmapAnnotation(treatment=meta[colnames(as.matrix(na.omit(alpha_out_scaled$berger_parker_dominance))),]$treatment,
                                                                        timepoint=meta[colnames(as.matrix(na.omit(alpha_out_scaled$berger_parker_dominance))),]$timepoint,
                                                                        col=colours,
                                                                        #show_legend = F,
                                                                        show_annotation_name = F))
#annotation_label = NULL,
#annotation_name_gp = gpar()))
berger
ENS <- Heatmap(as.matrix(na.omit(alpha_out_scaled$ENS_pie)),
               column_title = "ENS_pie",
               col = viridis(3),
               column_title_gp = gpar(fontsize = 10),
               name = "ENS_pie",
               row_names_gp = grid::gpar(fontsize = 6),
               heatmap_legend_param = list(title_gp = gpar(fontsize = 5, fontface = "bold"),
                                           labels_gp = gpar(fontsize = 5),  
                                           grid_height=unit(1, "mm"),
                                           grid_width=unit(1,"mm"),
                                           legend_direction = "horizontal"),
               show_column_names = FALSE,
               bottom_annotation = ComplexHeatmap::HeatmapAnnotation(treatment=meta[colnames(as.matrix(na.omit(alpha_out_scaled$ENS_pie))),]$treatment,
                                                                     timepoint=meta[colnames(as.matrix(na.omit(alpha_out_scaled$ENS_pie))),]$timepoint,
                                                                     col=colours))

#draw(ENS)
heips <- Heatmap(as.matrix(na.omit(alpha_out_scaled$heips_evenness)),
                 column_title = "heips_evenness",
                 col = viridis(3),
                 column_title_gp = gpar(fontsize = 10),
                 name = "heips_evenness",
                 row_names_gp = grid::gpar(fontsize = 6),
                 heatmap_legend_param = list(title_gp = gpar(fontsize = 5, fontface = "bold"),
                                             labels_gp = gpar(fontsize = 5),  
                                             grid_height=unit(1, "mm"),
                                             grid_width=unit(1,"mm"),
                                             legend_direction = "horizontal"),
                 show_column_names = FALSE,
                 bottom_annotation = ComplexHeatmap::HeatmapAnnotation(treatment=meta[colnames(as.matrix(na.omit(alpha_out_scaled$heips_evenness))),]$treatment,
                                                                       timepoint=meta[colnames(as.matrix(na.omit(alpha_out_scaled$heips_evenness))),]$timepoint,
                                                                       col=colours))

#draw(heips)
pie_mat <- as.matrix(alpha_out$pielous_evenness)

pielous <- Heatmap(as.matrix(na.omit(alpha_out_scaled$pielous_evenness)),
                   column_title = "pielous_evenness",
                   column_title_gp = gpar(fontsize = 10),
                   col = viridis(3),
                   name = "pielous_evenness",
                   row_names_gp = grid::gpar(fontsize = 10),
                   heatmap_legend_param = list(title_gp = gpar(fontsize = 8, fontface = "bold"),
                                               labels_gp = gpar(fontsize = 8),  
                                               grid_height=unit(1, "mm"),
                                               grid_width=unit(1,"mm"),
                                               legend_direction = "horizontal"),
                   show_column_names = FALSE,
                   bottom_annotation = ComplexHeatmap::HeatmapAnnotation(treatment=meta[colnames(as.matrix(na.omit(alpha_out_scaled$pielous_evenness))),]$treatment,
                                                                         timepoint=meta[colnames(as.matrix(na.omit(alpha_out_scaled$pielous_evenness))),]$timepoint,
                                                                         col=colours,
                                                                         show_annotation_name = F))

#draw(pielous)
gini <- Heatmap(as.matrix(na.omit(alpha_out_scaled$gini_simpson_index)),
                column_title = "gini_simpson_index",
                column_title_gp = gpar(fontsize = 10), 
                col = viridis(3),
                name = "gini_simpson_index",
                row_names_gp = grid::gpar(fontsize = 6),
                show_column_names = FALSE,
                heatmap_legend_param = list(title_gp = gpar(fontsize = 8, fontface = "bold"),
                                            labels_gp = gpar(fontsize = 8),  
                                            grid_height=unit(1, "mm"),
                                            grid_width=unit(1,"mm"),
                                            legend_direction = "horizontal"),
                bottom_annotation = ComplexHeatmap::HeatmapAnnotation(treatment=meta[colnames(as.matrix(na.omit(alpha_out_scaled$gini_simpson_index))),]$treatment,
                                                                      timepoint=meta[colnames(as.matrix(na.omit(alpha_out_scaled$gini_simpson_index))),]$timepoint,
                                                                      col=colours))

#draw(gini)
simp <- Heatmap(as.matrix(na.omit(alpha_out_scaled$simpsons_evenness)),
                column_title = "simpsons_evenness",
                col = viridis(3),
                column_title_gp = gpar(fontsize = 10),
                name = "simpsons_evenness",
                row_names_gp = grid::gpar(fontsize = 6),
                show_column_names = FALSE,
                heatmap_legend_param = list(title_gp = gpar(fontsize = 8, fontface = "bold"),
                                            labels_gp = gpar(fontsize = 8),  
                                            grid_height=unit(1, "mm"),
                                            grid_width=unit(1,"mm"),
                                            legend_direction = "horizontal"),
                bottom_annotation = ComplexHeatmap::HeatmapAnnotation(treatment=meta[colnames(as.matrix(na.omit(alpha_out_scaled$simpsons_evenness))),]$treatment,
                                                                      timepoint=meta[colnames(as.matrix(na.omit(alpha_out_scaled$simpsons_evenness))),]$timepoint,
                                                                      col=colours))

#draw(simp)
invsimp <- Heatmap(as.matrix(na.omit(alpha_out_scaled$inverse_simpson_index)),
                   column_title = "inverse_simpson_index",
                   col = viridis(3),
                   column_title_gp = gpar(fontsize = 10),
                   name = "inverse_simpson_index",
                   row_names_gp = grid::gpar(fontsize = 12),
                   show_column_names = FALSE,
                   heatmap_legend_param = list(title_gp = gpar(fontsize = 8, fontface = "bold"),
                                               labels_gp = gpar(fontsize = 8),  
                                               grid_height=unit(1, "mm"),
                                               grid_width=unit(1,"mm"),
                                               legend_direction = "horizontal"),
                   bottom_annotation = ComplexHeatmap::HeatmapAnnotation(treatment=meta[colnames(as.matrix(na.omit(alpha_out_scaled$inverse_simpson_index))),]$treatment,
                                                                         timepoint=meta[colnames(as.matrix(na.omit(alpha_out_scaled$inverse_simpson_index))),]$timepoint,
                                                                         col=colours))

draw(invsimp)
#save externally
png(file="figures\\humann_alpha_func_3.png",width=40,height=20,units="in",res=300)
draw(invsimp, 
     heatmap_legend_side = "left", 
     annotation_legend_side = "left")
dev.off()
#ggsave("figures\\humann_alpha_func.svg", width = 20, height = 10, dpi = 300)

#save externally
#png(file="figures\\humann_alpha_func.png")

draw(ht)
dev.off()