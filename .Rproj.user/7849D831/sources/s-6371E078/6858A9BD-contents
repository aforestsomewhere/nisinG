#final beta T24

#' Script to assess beta diversity for NisinG samples
#' Developed by A. Kate Fal√† (https://github.com/aforestsomewhere)
#' Computes Bray-Curtis, and UNIFRAC (weighted and unweighted)
#
###############################

##############################
### Packages and palettes  ###
##############################
library(tidyverse)
library(dplyr)
library(vegan)
library(cowplot)
library(devEMF)
library(webshot)
library(ggplot2)
library(rbiom)
library(phyloseq)
library(ggrepel)
library(microbiome)
library(pairwiseAdonis)
library(ggforce)
theme_set(theme_classic())
palette_groups <- c("#332211","#ffcc44", "#44aacc", "#bb2211")
palette_collapsed <- c("#FF0000", "#00A08A")

####################
### functions    ###
####################

#new vectorised
sigcode <- function(P) {
  sapply(P, function(p) {
    if (p <= 0) {
      return("NaN")
    } else if (p < 0.001) {
      return("***")
    } else if (p < 0.01) {
      return("**")
    } else if (p <= 0.05) {
      return("*")
    } else if (p < 0.1) {
      return(".")
    } else {
      return(" ")
    }
  })
}
#Functions to adjust X and Y axes for PCoA computed through Phyloseq
new_ylab <- function(plot) {
  y_axis <- get_plot_component(plot, "ylab-l")
  ylab <- y_axis$children[[1]]$label
  # Find the position of the opening and closing square brackets
  start_pos <- regexpr("\\[", ylab)
  end_pos <- regexpr("\\]", ylab)
  # Extract the substring between the square brackets
  percent <- substring(ylab, start_pos+1, end_pos-1)
  result <- paste("PC2 (",percent,")")
  return(result)
}
new_xlab <- function(plot) {
  x_axis <- get_plot_component(plot, "xlab-b")
  xlab <- x_axis$children[[1]]$label
  # Find the position of the opening and closing square brackets
  start_pos <- regexpr("\\[", xlab)
  end_pos <- regexpr("\\]", xlab)
  # Extract the substring between the square brackets
  percent <- substring(xlab, start_pos + 1, end_pos - 1)
  result <- paste("PC1 (",percent,")")
  return(result)
}

####################
### read data    ###
####################
meta <- read.csv("cleaned_data/metadata.csv", nrows=36, row.names=1)
meta <- meta %>% filter(timepoint=="T_24") %>%
  mutate(strep_exposure = case_when(
    treatment == "FS" ~ "Y", 
    treatment == "S" ~ "Y",
    treatment == "F" ~ "N",
    treatment == "B" ~ "N"))


mpa_table <- read.table("cleaned_data/mpa_table.tsv", comment.char = '#', sep = '\t', header = TRUE, row.names=NULL)
#filter to species level assignments
mpa_table <- mpa_table[grep('s__',mpa_table[,1]),]
mpa_table[,1] <- gsub(".+\\|s__", "", mpa_table[,1])
#remove duplicates by filtering to t__ level
#mpa_table <- mpa_table %>% filter(!grepl('t__',row.names))
rownames(mpa_table) <- mpa_table[,1]
mpa_table <- mpa_table[,-1]
#filter abundance data to timepoint T_24 only
samples <- rownames(meta)
mpa_table[,colnames(mpa_table) %in% samples] -> mpa_table
#generate matrix of abundance data
mpa_mat = t(as.matrix(mpa_table))

#Phyloseq for UNIFRAC
metaphlanToPhyloseq = function(
  tax,
  metadat=NULL,
  simplenames=TRUE,
  roundtointeger=FALSE,
  split="|"){
  xnames = rownames(tax)
  shortnames = gsub(paste0(".+\\", split), "", xnames)
  if(simplenames){
    rownames(tax) = shortnames
  }
  if(roundtointeger){
    tax = round(tax * 1e4)
  }
  x2 = strsplit(xnames, split=split, fixed=TRUE)
  taxmat = matrix(NA, ncol=max(sapply(x2, length)), nrow=length(x2))
  colnames(taxmat) = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")[1:ncol(taxmat)]
  rownames(taxmat) = rownames(tax)
  for (i in 1:nrow(taxmat)){
    taxmat[i, 1:length(x2[[i]])] = x2[[i]]
  }
  taxmat = gsub("[a-z]__", "", taxmat)
  taxmat = phyloseq::tax_table(taxmat)
  otutab = phyloseq::otu_table(tax, taxa_are_rows=TRUE)
  if(is.null(metadat)){
    res = phyloseq::phyloseq(taxmat, otutab)
  }else{
    res = phyloseq::phyloseq(taxmat, otutab, phyloseq::sample_data(metadat))
  }
  return(res)
}

####################
### read data    ###
####################

#Read cross reference of SGB to taxonomy
#remove 'SGB' and '_group' from first column to allow matching to the tree
mpa_legend <- read.table("data\\mpa_vJan21_CHOCOPhlAnSGB_202103_species.txt", sep = '\t')
mpa_legend$V1 <- gsub("_group", "", mpa_legend$V1)
mpa_legend$V1 <- gsub("SGB", "", mpa_legend$V1)
#generate base Phyloseq obj
mpa.phy = metaphlanToPhyloseq(mpa_table)
phy <- metaphlanToPhyloseq(
  phyloseq::otu_table(mpa.phy),
  metadat=phyloseq::sample_data(meta, errorIfNULL = TRUE),
  simplenames=TRUE,
  roundtointeger=FALSE,
  split="|")

#generate guide tree, importing full tree from MPA and filtering by taxa detected
read_tree("data\\mpa_vJan21_CHOCOPhlAnSGB_202103.nwk") -> mpa_tree
new_tree <- mpa_tree; new_tree$tip.label <- mpa_legend$V2[match(mpa_tree$tip.label,mpa_legend$V1)]
new_tree$tip.label <- gsub(".+\\|s__", "", new_tree$tip.label)
filt_tree <- ape::keep.tip(new_tree, intersect(rownames(phy@otu_table),new_tree$tip.label))
filt_mpa <- mpa_table[filt_tree$tip.label,] / 100.0
phy = phyloseq::merge_phyloseq(phy, filt_tree)



################
### ANOSIM   ###
################
#ANOSIM (ANalysis Of Similarities) is a non-parametric test of significant difference 
#between two or more groups, based on any distance measure (Clarke 1993). The distances 
#are converted to ranks. ANOSIM is normally used for taxa-in-samples data, where groups 
#of samples are to be compared.
#filter out dupes

keep_rows <- grepl("t__", row.names(mpa_table), perl = TRUE)
mpa_table_filtered <- mpa_table[!keep_rows, ]
#generate matrix of abundance data
mpa_mat = t(as.matrix(mpa_table_filtered))
#order samples (rows) to properly merge with infO
mpa_mat <- mpa_mat[sort(rownames(mpa_mat)),]
dist_mat_ai = vegdist(mpa_mat, method="robust.aitchison")
dist_mat_bc = vegdist(mpa_mat, methd = "bray")
#UNIFRAC
#Weighted, unnormalised
phy@sam_data$timepoint = factor(phy@sam_data$timepoint, levels = c("T_0", "T_6", "T_24"))
dist_mat_wUF <- UniFrac(phy, 
                        weighted = TRUE, 
                        normalized = FALSE,  
                        parallel = FALSE, 
                        fast = TRUE)
dist_mat_uUF <- UniFrac(phy, 
                        weighted = FALSE, 
                        normalized = FALSE,  
                        parallel =FALSE, 
                        fast = TRUE)
#initialise output DF
anosim_df_all <- data.frame(Data="MetaPhlAn4", 
                            Metric="Robust Aitchison Distances",
                            Comparing=NA,
                            Test="ANOSIM",
                            Test_Statistic=NA,
                            P_value=NA,
                            Significance_codes="NA")
#timepoint
calc_anosim <- function(distmat, group, dataset, metric, groupname){
  res <- anosim(distmat,group, permutations = 9999)
  P <- res$signif
  F<-res$statistic
  S<-sigcode(P)
  anosim_df <- c(dataset, metric, groupname, "anosim",F,P,S)
  return(anosim_df)
}

#Here, only have n to compare Strep exposure
#Bray
anosim_df_all <-rbind(anosim_df_all, calc_anosim(dist_mat_ai,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Bray-Curtis Distances", groupname="Any exposure"))
anosim_df_all[-1,]-> anosim_df_all #remove first shaper row (empty)

#Robust Aitchisons
anosim_df_all <-rbind(anosim_df_all, calc_anosim(dist_mat_ai,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Robust Aitchison Distances", groupname="Any exposure"))
#Weighted UNIFRAC
anosim_df_all <-rbind(anosim_df_all, calc_anosim(dist_mat_wUF,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Weighted UNIFRAC distances", groupname="Any exposure"))
#Unweighted UNIFRAC
anosim_df_all <-rbind(anosim_df_all, calc_anosim(dist_mat_uUF,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Unweighted UNIFRAC distances", groupname="Any exposure"))

#adonis
calc_adonis <- function(distmat, group, dataset, metric, groupname){
  res <- adonis2(distmat~group, permutations = 9999)
  P<- res["group","Pr(>F)"]
  F<-res["group","F"]
  S<-sigcode(P)
  adonis_df <- c(dataset, metric, groupname, "adonis2",F,P,S)
  return(adonis_df)
}
#BC
anosim_df_all <-rbind(anosim_df_all, calc_adonis(dist_mat_bc,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Bray-Curtis dissimilarity", groupname="Any exposure"))
#Robust Aitchisons
anosim_df_all <-rbind(anosim_df_all, calc_adonis(dist_mat_ai,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Robust Aitchison distances", groupname="Any exposure"))
#Weighted UNIFRAC
anosim_df_all <-rbind(anosim_df_all, calc_adonis(dist_mat_wUF,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Weighted UNIFRAC distances", groupname="Any exposure"))
#Unweighted UNIFRAC
anosim_df_all <-rbind(anosim_df_all, calc_adonis(dist_mat_uUF,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Unweighted UNIFRAC distances", groupname="Any exposure"))

#beta dispersion
#check beta dispersions within exposure groups
calc_disp <- function(distmat, group, dataset, metric, groupname){
  res <- betadisper(distmat, group)
  disp <- permutest(res, pairwise=TRUE, permutations=1000)
  R<-disp$tab$F[1]
  P<- disp$tab$'Pr(>F)'[1]
  S<-sigcode(P)
  adonis_df <- c(dataset, metric, groupname, "beta_dispersion",R,P,S)
  return(adonis_df)
}

#calc_disp(dist_mat_uUF,group=meta$timepoint, dataset="MetaPhlAn4", metric="Unweighted UNIFRAC distances", groupname="Timepoint")
#BC
anosim_df_all <-rbind(anosim_df_all, calc_disp(dist_mat_bc,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Bray-Curtis dissimilarity", groupname="Any exposure"))
#Robust Aitchisons
anosim_df_all <-rbind(anosim_df_all, calc_disp(dist_mat_ai,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Robust Aitchison distances", groupname="Any exposure"))
#Weighted UNIFRAC
anosim_df_all <-rbind(anosim_df_all, calc_disp(dist_mat_wUF,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Weighted UNIFRAC distances", groupname="Any exposure"))
#Unweighted UNIFRAC
anosim_df_all <-rbind(anosim_df_all, calc_disp(dist_mat_uUF,group=meta$strep_exposure, dataset="MetaPhlAn4", metric="Unweighted UNIFRAC distances", groupname="Any exposure"))

beta_stats_all <- anosim_df_all
beta_stats_alltimes <- read.csv("reports/beta_alltimepoints_testing.csv")
#######################
#generate output file #
#######################
list_of_datasets <- list("Beta diversity, all timepoints" = beta_stats_alltimes,
                         "Beta diversity, T_24" = beta_stats_all)
openxlsx::write.xlsx(list_of_datasets, file = "reports/beta_diversity.xlsx")

###############################
# Plots, all timepoints       #
###############################
###############################
# Robust Aitchisons           #
###############################

cmd_res = cmdscale(dist_mat_ai, 
                   k = (nrow(mpa_mat) - 1),
                   eig = TRUE)

# calculate the proportion of variance in the data which is explained by 
#the first two PCoA axes
PC1 <- round(100*(cmd_res$eig[1]/(sum(cmd_res$eig))), digits = 2)
PC2 <- round(100*(cmd_res$eig[2]/(sum(cmd_res$eig))), digits = 2)
#extract details of features
pcoa_df = tibble(PC1 = cmd_res$points[,1], 
                 PC2 = cmd_res$points[,2])

#combine pcoa with sample data
pcoa_meta = bind_cols(pcoa_df, meta)
#timepoint
p2 = ggplot(pcoa_meta,aes(x = PC1, y = PC2, color=strep_exposure)) + 
  scale_color_manual(name="Any exposure",
                     labels=c(expression(paste("No ", italic("S. salivarius"), " DPC6487")),
                              expression(paste("Any ", italic("S. salivarius"), " DPC6487"))),
                     values = palette_collapsed) + 
  scale_fill_manual(name="Any exposure",
                    labels=c(expression(paste("No ", italic("S. salivarius"), " DPC6487")),
                             expression(paste("Any ", italic("S. salivarius"), " DPC6487"))),
                    values = palette_collapsed) +
  labs(shape="Treatment") +
  theme(axis.title.x= element_text(size=10),
        axis.title.y = element_text(size=10),
        axis.text.x = element_text(size=10),
        axis.text.y = element_text(size=10),
        legend.key.size = unit(0.5, 'mm'),
        legend.title = element_text(size = 7, face = "bold"),
        legend.text = element_text(size=5),
        legend.title.align = 0.5,
        legend.text.align = 0,
        legend.position="bottom", legend.box = "horizontal",
        legend.background = element_rect(colour="black",linewidth = 0.5, linetype="solid"),
        plot.title = element_text(size = 14, hjust = 0.5)) +
  ylab(paste("PC2 (",PC2,"%)", sep=""))+
  xlab(paste("PC1 (",PC1,"%)", sep=""))+
  geom_mark_ellipse(aes(fill=strep_exposure),
                    alpha=0.05,
                    linetype = 2) +
  geom_point(aes(shape=treatment),size=1, alpha=1) +
  scale_shape_manual(name="Treatment",
                     labels=c("Control", #b
                              expression(paste(italic("F. nucleatum"), " DSM15643")), #f
                              expression(paste(italic("F. nuc"), " DSM15643 + ", italic("S. sal"), " DPC6487")), #fs
                              expression(paste(italic("S. salivarius"), " DPC6487"))), #s
                     values = c(15,16,17,18)) +
  guides(fill= "none",
         col= guide_legend(title.position = "top",
                           nrow=2, byrow=TRUE,
                           override.aes=list(fill=palette_collapsed)),
         shape = guide_legend(title.position = "top",
                              nrow=2, byrow=TRUE)) +
  ggtitle("Robust Aitchisons: T_24 ~ exposure")
p2
p2a
p2a <- p2 + expand_limits(x = c(-13,13), y = c(-10,13))
p2leg <- get_legend(p2a)
p2b <- p2a + theme(legend.position='none')
p2c <- ggdraw(plot_grid(p2b, p2leg,
                        nrow=2, rel_heights=c(10, 2),
                        rel_widths=c(17, 2),
                        axis = 'l', align = 'h'))
p2c

###############################
# Bray Curtis                 #
###############################

cmd_res = cmdscale(dist_mat_bc, 
                   k = (nrow(mpa_mat) - 1),
                   eig = TRUE)

# calculate the proportion of variance in the data which is explained by 
#the first two PCoA axes
PC1 <- round(100*(cmd_res$eig[1]/(sum(cmd_res$eig))), digits = 2)
PC2 <- round(100*(cmd_res$eig[2]/(sum(cmd_res$eig))), digits = 2)
#extract details of features
pcoa_df = tibble(PC1 = cmd_res$points[,1], 
                 PC2 = cmd_res$points[,2])

#combine pcoa with sample data
pcoa_meta = bind_cols(pcoa_df, meta)
#timepoint

##########################
#any strep exposure
p4 = ggplot(pcoa_meta,aes(x = PC1, y = PC2, color=strep_exposure)) + 
  scale_color_manual(name="Any exposure",
                     labels=c(expression(paste("No ", italic("S. salivarius"), " DPC6487")),
                              expression(paste("Any ", italic("S. salivarius"), " DPC6487"))),
                     values = palette_collapsed) + 
  scale_fill_manual(name="Any exposure",
                    labels=c(expression(paste("No ", italic("S. salivarius"), " DPC6487")),
                             expression(paste("Any ", italic("S. salivarius"), " DPC6487"))),
                    values = palette_collapsed) +
  labs(shape="Treatment") +
  theme(axis.title.x= element_text(size=10),
        axis.title.y = element_text(size=10),
        axis.text.x = element_text(size=10),
        axis.text.y = element_text(size=10),
        legend.key.size = unit(0.5, 'mm'),
        legend.title = element_text(size = 7, face = "bold"),
        legend.text = element_text(size=5),
        legend.title.align = 0.5,
        legend.text.align = 0,
        legend.position="bottom", legend.box = "horizontal",
        legend.background = element_rect(colour="black",linewidth = 0.5, linetype="solid"),
        plot.title = element_text(size = 14, hjust = 0.5)) +
  ylab(paste("PC2 (",PC2,"%)",sep=""))+
  xlab(paste("PC1 (",PC1,"%)",sep=""))+
  geom_mark_ellipse(aes(fill=strep_exposure),
                    alpha=0.05,
                    linetype = 2) +
  geom_point(aes(shape=treatment),size=1, alpha=1) +
  scale_shape_manual(name="Treatment",
                     labels=c("Control", #b
                              expression(paste(italic("F. nucleatum"), " DSM15643")), #f
                              expression(paste(italic("F. nuc"), " DSM15643 + ", italic("S. sal"), " DPC6487")), #fs
                              expression(paste(italic("S. salivarius"), " DPC6487"))), #s
                     values = c(15,16,17,18)) +
  guides(fill= "none",
         col= guide_legend(title.position = "top",
                           nrow=2, byrow=TRUE,
                           override.aes=list(fill=palette_collapsed)),
         shape = guide_legend(title.position = "top",
                              nrow=2, byrow=TRUE)) +
  ggtitle("Bray-Curtis: T_24 ~ exposure")
p4
p4a <- p4 + expand_limits(y = c(-.075,.075))
p4a
p4leg <- get_legend(p4a)
p4b <- p4a + theme(legend.position='none')
p4c <- ggdraw(plot_grid(p4b, p4leg,
                        nrow=2, rel_heights=c(10, 2),
                        rel_widths=c(17, 2),
                        axis = 'l', align = 'h'))

###############################
# Unweighted UNIFRAC            #
###############################

uUF.ordu = ordinate(phy, method="NMDS", distance="unifrac", weighted=FALSE)
##########################
#any strep exposure
p5 = plot_ordination(phy, uUF.ordu, type="sites", color="strep_exposure") +
  scale_color_manual(name="Any exposure",
                     labels=c(expression(paste("No ", italic("S. salivarius"), " DPC6487")),
                              expression(paste("Any ", italic("S. salivarius"), " DPC6487"))),
                     values = palette_collapsed) + 
  scale_fill_manual(name="Any exposure",
                    labels=c(expression(paste("No ", italic("S. salivarius"), " DPC6487")),
                             expression(paste("Any ", italic("S. salivarius"), " DPC6487"))),
                    values = palette_collapsed) +
  labs(shape="Treatment") +
  theme(axis.title.x= element_text(size=10),
        axis.title.y = element_text(size=10),
        axis.text.x = element_text(size=10),
        axis.text.y = element_text(size=10),
        legend.key.size = unit(0.5, 'mm'),
        legend.title = element_text(size = 7, face = "bold"),
        legend.text = element_text(size=5),
        legend.title.align = 0.5,
        legend.text.align = 0,
        legend.position="bottom", legend.box = "horizontal",
        legend.background = element_rect(colour="black",linewidth = 0.5, linetype="solid"),
        plot.title = element_text(size = 14, hjust = 0.5)) +
  geom_mark_ellipse(aes(fill=strep_exposure),
                    alpha=0.05,
                    linetype = 2) +
  geom_point(aes(shape=treatment),size=2, alpha=1) +
  scale_shape_manual(name="Treatment",
                     labels=c("Control", #b
                              expression(paste(italic("F. nucleatum"), " DSM15643")), #f
                              expression(paste(italic("F. nuc"), " DSM15643 + ", italic("S. sal"), " DPC6487")), #fs
                              expression(paste(italic("S. salivarius"), " DPC6487"))), #s
                     values = c(15,16,17,18)) +
  guides(fill= "none",
         col= guide_legend(title.position = "top",
                           nrow=2, byrow=TRUE,
                           override.aes=list(fill=palette_collapsed)),
         shape = guide_legend(title.position = "top",
                              nrow=2, byrow=TRUE)) +
  annotate("text", x=-Inf,y=-Inf,hjust=-0.1,vjust=-.98,label=(paste("Stress=",round(uUF.ordu$stress, digits = 6))))+
  ggtitle("Unweighted UNIFRAC: T_24 ~ exposure")
p5
p5a <- p5 + expand_limits(x = c(-.2,.4), y = c(-.075,.075))
p5a
p5leg <- get_legend(p5a)
p5b <- p5a + theme(legend.position='none')
p5c <- ggdraw(plot_grid(p5b, p5leg,
                        nrow=2, rel_heights=c(10, 2),
                        rel_widths=c(17, 2),
                        axis = 'l', align = 'h'))

###############################
# Weighted UNIFRAC            #
###############################

wUF.ordu = ordinate(phy, method="NMDS", distance="unifrac", weighted=TRUE)
##########################
#any strep exposure - weighted UNIFRAC
p6 = plot_ordination(phy, wUF.ordu, type="sites", color="strep_exposure") +
  scale_color_manual(name="Any exposure",
                     labels=c(expression(paste("No ", italic("S. salivarius"), " DPC6487")),
                              expression(paste("Any ", italic("S. salivarius"), " DPC6487"))),
                     values = palette_collapsed) + 
  scale_fill_manual(name="Any exposure",
                    labels=c(expression(paste("No ", italic("S. salivarius"), " DPC6487")),
                             expression(paste("Any ", italic("S. salivarius"), " DPC6487"))),
                    values = palette_collapsed) +
  labs(shape="Timepoint") +
  theme(axis.title.x= element_text(size=10),
        axis.title.y = element_text(size=10),
        axis.text.x = element_text(size=10),
        axis.text.y = element_text(size=10),
        legend.key.size = unit(0.5, 'mm'),
        legend.title = element_text(size = 7, face = "bold"),
        legend.text = element_text(size=5),
        legend.title.align = 0.5,
        legend.text.align = 0,
        legend.position="bottom", legend.box = "horizontal",
        legend.background = element_rect(colour="black",linewidth = 0.5, linetype="solid"),
        plot.title = element_text(size = 14, hjust = 0.5)) +
  #ylab(paste("PC2 (",PC2,"%)",sep=""))+
  #xlab(paste("PC1 (",PC1,"%)",sep=""))+
  geom_mark_ellipse(aes(fill=strep_exposure),
                    alpha=0.05,
                    linetype = 2) +
  geom_point(aes(shape=treatment),size=1, alpha=1) +
  scale_shape_manual(name="Treatment",
                     labels=c("Control", #b
                              expression(paste(italic("F. nucleatum"), " DSM15643")), #f
                              expression(paste(italic("F. nuc"), " DSM15643 + ", italic("S. sal"), " DPC6487")), #fs
                              expression(paste(italic("S. salivarius"), " DPC6487"))), #s
                     values = c(15,16,17,18)) +  guides(fill= "none",
         col= guide_legend(title.position = "top",
                           nrow=2, byrow=TRUE,
                           override.aes=list(fill=palette_collapsed)),
         shape = guide_legend(title.position = "top",
                              nrow=2, byrow=TRUE)) +
  annotate("text", x=-Inf,y=-Inf,hjust=-0.1,vjust=-.98,label=(paste("Stress=",round(wUF.ordu$stress, digits = 6))))+
  ggtitle("Weighted UNIFRAC: T_24 ~ exposure")
p6
p6a <- p6 + expand_limits(y = c(-.0002,.0002))
p6a
p6leg <- get_legend(p6a)
p6b <- p6a + theme(legend.position='none')
p6c <- ggdraw(plot_grid(p6b, p6leg,
                        nrow=2, rel_heights=c(10, 2),
                        rel_widths=c(17, 2),
                        axis = 'l', align = 'h'))
#PCOA for latter
wUF.ordu = ordinate(phy, method="PCoA", distance="unifrac", weighted=TRUE)

##########################
#any strep exposure - weighted UNIFRAC
p7 = plot_ordination(phy, wUF.ordu, type="sites", color="strep_exposure") +
  scale_color_manual(name="Any exposure",
                     labels=c(expression(paste("No ", italic("S. salivarius"), " DPC6487")),
                              expression(paste("Any ", italic("S. salivarius"), " DPC6487"))),
                     values = palette_collapsed) + 
  scale_fill_manual(name="Any exposure",
                    labels=c(expression(paste("No ", italic("S. salivarius"), " DPC6487")),
                             expression(paste("Any ", italic("S. salivarius"), " DPC6487"))),
                    values = palette_collapsed) +
  labs(shape="Timepoint") +
  theme(axis.title.x= element_text(size=10),
        axis.title.y = element_text(size=10),
        axis.text.x = element_text(size=10),
        axis.text.y = element_text(size=10),
        legend.key.size = unit(0.5, 'mm'),
        legend.title = element_text(size = 7, face = "bold"),
        legend.text = element_text(size=5),
        legend.title.align = 0.5,
        legend.text.align = 0,
        legend.position="bottom", legend.box = "horizontal",
        legend.background = element_rect(colour="black",linewidth = 0.5, linetype="solid"),
        plot.title = element_text(size = 14, hjust = 0.5)) +
  #ylab(paste("PC2 (",PC2,"%)",sep=""))+
  #xlab(paste("PC1 (",PC1,"%)",sep=""))+
  geom_mark_ellipse(aes(fill=strep_exposure),
                    alpha=0.05,
                    linetype = 2) +
  geom_point(aes(shape=treatment),size=1, alpha=1) +
  scale_shape_manual(name="Treatment",
                     labels=c("Control", #b
                              expression(paste(italic("F. nucleatum"), " DSM15643")), #f
                              expression(paste(italic("F. nuc"), " DSM15643 + ", italic("S. sal"), " DPC6487")), #fs
                              expression(paste(italic("S. salivarius"), " DPC6487"))), #s
                     values = c(15,16,17,18)) +  guides(fill= "none",
         col= guide_legend(title.position = "top",
                           nrow=2, byrow=TRUE,
                           override.aes=list(fill=palette_collapsed)),
         shape = guide_legend(title.position = "top",
                              nrow=2, byrow=TRUE)) +
  ggtitle("Weighted UNIFRAC: T_24 ~ exposure")
p7


p7a <- p7 + expand_limits(y = c(-.05,.06)) +
  xlab(new_xlab(p7)) + ylab(new_ylab(p7))
p7a
p7leg <- get_legend(p7a)
p7b <- p7a + theme(legend.position='none')
p7c <- ggdraw(plot_grid(p7b, p7leg,
                        nrow=2, rel_heights=c(10, 2),
                        rel_widths=c(17, 2),
                        axis = 'l', align = 'h'))

p0 <- ggdraw(plot_grid(p2c,p4c, p5c, p6c, p7c,
                        align = "h", ncol = 2,
                        labels = "AUTO"))
p0
# ggsave("figures/beta_all_time_wUF.png", width=13, height=29, dpi=300, units="cm")
ggsave("figures/beta_T_24.pdf", width=30, height=40, dpi=300, units="cm")

